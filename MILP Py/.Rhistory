df <- ungroup(.x) %>% mutate(player_id = .y$player_id)
windows <- slide(df %>% select(all_of(catF)),
.f = ~ as.matrix(.x),
.before = ws,
#.after = -1,
.complete = TRUE)
valid_windows <- windows[(ws + 1):length(windows)]
target <- df[[tar]][(ws + 1):nrow(df)]
tibble(window = valid_windows, target = target)
}) %>%
ungroup()
cat("Kj√∏rt")
# Check for any NA in the windows before summary
sumna <- sapply(numW$window, function(flatW) any(is.na(flatW)))
cat("Windows with NA: ", sum(sumna), "\n")
#----------------------------
# 4. Lasso regression
#----------------------------
# numW as data.matrix, tar as response variable
aggmat <- lapply(numW$window, function(flatW){
colMeans(flatW, na.rm = TRUE)
})
x <- do.call(rbind, aggmat)
y <- numW$target
# K-fold CV
cvfit <- cv.glmnet(x,y,alpha=1)
minlambda <- cvfit$lambda.min
lassofit <- glmnet(x,y,alpha = 1, lambda = minlambda)
coef_lasso <- as.matrix(coef(lassofit))
numF <- rownames(coef_lasso)[coef_lasso[,1] != 0]
numF <- setdiff(numF, "(Intercept)")
cat("Selected features: ", numF, "\n")
# repeat rolling window, now only containing selected features
# Define window size (number of past gameweeks to use)
ws <- vindu
# Build numerical rolling windows
numW <- gk %>%
group_by(player_id) %>%
filter(n() > ws) %>%  # Only players with more than ws observations
group_modify(~ {
windows <- slide(.x[, numF],
.f = ~ as.matrix(.x),
.before = ws,
.after = -1,
.complete = TRUE)
valid_windows <- windows[(ws + 1):length(windows)]
target <- .x[[tar]][(ws + 1):nrow(.x)]
# Extract row_id for each valid window
rid <- .x$row_id[(ws + 1):nrow(.x)]
tibble(window = valid_windows, target = target, row_id = rid)
}) %>%
ungroup()
numW <- numW %>%
left_join(gk %>% select(row_id, GW), by = "row_id")
#============================
# 5. Convert Rolling Windows to Arrays & Extract Targets
#============================
# Number of samples is the number of rows in numW
nSamp <- nrow(numW)
# Convert numerical windows to a 3D array of shape [nSamp, ws, length(numF)]
num_array <- array(
unlist(numW$window),
dim = c(nSamp, ws, length(numF))
)
# Targets (scaled): a matrix with one column
targets <- matrix(as.numeric(numW$target), ncol = 1)
# For categorical inputs, extract the current categorical values from the last row of each window.
# (If your windows were built solely from historical data, the "current" values need to come from the original data.)
# Here, we use the categorical rolling windows and extract the last row:
cat_current <- do.call(rbind, lapply(catW$window, function(mat) mat[nrow(mat), ]))
# Split into separate matrices (each of shape [nSamp, 1])
cat_player_id <- matrix(as.integer(cat_current[, "player_id"]), ncol = 1)
cat_tID <- matrix(as.integer(cat_current[, "tID"]), ncol = 1)
cat_oID <- matrix(as.integer(cat_current[, "oID"]), ncol = 1)
cat_hID <- matrix(as.integer(cat_current[, "hID"]), ncol = 1)
cat("Chunk ferdig")
#============================
# 6. Split Data into Training and Validation Sets
#============================
idx <- which(numW$GW <= split_gw)
# Training data
Xnum_train <- num_array[idx, , , drop = FALSE]
cat_player_id_train <- cat_player_id[idx, , drop = FALSE]
cat_tID_train <- cat_tID[idx, , drop = FALSE]
cat_oID_train <- cat_oID[idx, , drop = FALSE]
cat_hID_train <- cat_hID[idx, , drop = FALSE]
y_train <- targets[idx, , drop = FALSE]
# Validation data
Xnum_val <- num_array[-idx, , , drop = FALSE]
cat_player_id_val <- cat_player_id[-idx, , drop = FALSE]
cat_tID_val <- cat_tID[-idx, , drop = FALSE]
cat_oID_val <- cat_oID[-idx, , drop = FALSE]
cat_hID_val <- cat_hID[-idx, , drop = FALSE]
y_val <- targets[-idx, , drop = FALSE]
# Also, extract the row IDs for the validation samples (for later joining)
val_row_ids <- numW$row_id[-idx]
cat("Chunk ferdig")
#============================
# 6. Split Data into Training and Validation Sets
#============================
idx <- which(numW$GW <= split_gw)
# Training data
Xnum_train <- num_array[idx, , , drop = FALSE]
cat_player_id_train <- cat_player_id[idx, , drop = FALSE]
cat_tID_train <- cat_tID[idx, , drop = FALSE]
cat_oID_train <- cat_oID[idx, , drop = FALSE]
cat_hID_train <- cat_hID[idx, , drop = FALSE]
y_train <- targets[idx, , drop = FALSE]
# Validation data
Xnum_val <- num_array[-idx, , , drop = FALSE]
cat_player_id_val <- cat_player_id[-idx, , drop = FALSE]
cat_tID_val <- cat_tID[-idx, , drop = FALSE]
cat_oID_val <- cat_oID[-idx, , drop = FALSE]
cat_hID_val <- cat_hID[-idx, , drop = FALSE]
y_val <- targets[-idx, , drop = FALSE]
# Also, extract the row IDs for the validation samples (for later joining)
val_row_ids <- numW$row_id[-idx]
cat("Chunk ferdig")
# Merge categorical branch
cat_merged <- layer_concatenate(list(embedding_player_id, embedding_tID, embedding_oID, input_hID_flat)) %>%
layer_dense(units = 16, activation = "relu")
# Merge categorical branch
cat_merged <- layer_concatenate(list(embedding_player_id, embedding_tID, embedding_oID, input_hID_flat)) %>%
layer_dense(units = 16, activation = "relu")
#============================
# 7. Build the Model
#============================
# Define maximum values for categorical features
num_players   <- max(gk$player_id)
num_teams     <- max(gk$tID)
num_opponents <- max(gk$oID)
emb_dim <- 20  # Embedding dimension
#============================
# 6. Split Data into Training and Validation Sets
#============================
idx <- which(numW$GW <= split_gw)
# Training data
Xnum_train <- num_array[idx, , , drop = FALSE]
cat_player_id_train <- cat_player_id[idx, , drop = FALSE]
cat_tID_train <- cat_tID[idx, , drop = FALSE]
cat_oID_train <- cat_oID[idx, , drop = FALSE]
cat_hID_train <- cat_hID[idx, , drop = FALSE]
y_train <- targets[idx, , drop = FALSE]
# Validation data
Xnum_val <- num_array[-idx, , , drop = FALSE]
cat_player_id_val <- cat_player_id[-idx, , drop = FALSE]
cat_tID_val <- cat_tID[-idx, , drop = FALSE]
cat_oID_val <- cat_oID[-idx, , drop = FALSE]
cat_hID_val <- cat_hID[-idx, , drop = FALSE]
y_val <- targets[-idx, , drop = FALSE]
# Also, extract the row IDs for the validation samples (for later joining)
val_row_ids <- numW$row_id[-idx]
cat("Chunk ferdig")
#============================
idx <- which(numW$GW <= split_gw)
# Training data
Xnum_train <- num_array[idx, , , drop = FALSE]
cat_player_id_train <- cat_player_id[idx, , drop = FALSE]
cat_tID_train <- cat_tID[idx, , drop = FALSE]
cat_oID_train <- cat_oID[idx, , drop = FALSE]
cat_hID_train <- cat_hID[idx, , drop = FALSE]
y_train <- targets[idx, , drop = FALSE]
# Validation data
Xnum_val <- num_array[-idx, , , drop = FALSE]
cat_player_id_val <- cat_player_id[-idx, , drop = FALSE]
cat_tID_val <- cat_tID[-idx, , drop = FALSE]
cat_oID_val <- cat_oID[-idx, , drop = FALSE]
cat_hID_val <- cat_hID[-idx, , drop = FALSE]
y_val <- targets[-idx, , drop = FALSE]
# Also, extract the row IDs for the validation samples (for later joining)
val_row_ids <- numW$row_id[-idx]
cat("Chunk ferdig")
```
cat_player_id_train <- cat_player_id[idx, , drop = FALSE]
cat_tID_train <- cat_tID[idx, , drop = FALSE]
cat_tID_train <- cat_tID[idx, , drop = FALSE]
cat_oID_train <- cat_oID[idx, , drop = FALSE]
cat_hID_train <- cat_hID[idx, , drop = FALSE]
y_train <- targets[idx, , drop = FALSE]
cat_player_id_val <- cat_player_id[-idx, , drop = FALSE]
cat_player_id_val <- cat_player_id[-idx, , drop = FALSE]
cat_tID_val <- cat_tID[-idx, , drop = FALSE]
cat_oID_val <- cat_oID[-idx, , drop = FALSE]
cat_hID_val <- cat_hID[-idx, , drop = FALSE]
y_val <- targets[-idx, , drop = FALSE]
# Also, extract the row IDs for the validation samples (for later joining)
val_row_ids <- numW$row_id[-idx]
cat("Chunk ferdig")
cat("Chunk ferdig")
## 1.7 Model GK
```{r}
#============================
# 7. Build the Model
#============================
# Define maximum values for categorical features
num_players   <- max(gk$player_id)
#============================
# 7. Build the Model
#============================
# Define maximum values for categorical features
num_players   <- max(gk$player_id)
num_teams     <- max(gk$tID)
num_opponents <- max(gk$oID)
# For hID, assume it???s binary
emb_dim <- 20  # Embedding dimension
# Create input layers for current categorical values
input_player_id <- layer_input(shape = c(1), dtype = "int32", name = "input_player_id")
input_tID <- layer_input(shape = c(1), dtype = "int32", name = "input_tID")
input_oID <- layer_input(shape = c(1), dtype = "int32", name = "input_oID")
input_hID <- layer_input(shape = c(1), dtype = "int32", name = "input_hID")
embedding_player_id <- input_player_id %>%
layer_embedding(input_dim = num_players + 1, output_dim = emb_dim, mask_zero = TRUE) %>%
layer_flatten()
embedding_tID <- input_tID %>%
layer_embedding(input_dim = num_teams + 1, output_dim = emb_dim, mask_zero = TRUE) %>%
layer_flatten()
embedding_oID <- input_oID %>%
layer_embedding(input_dim = num_opponents + 1, output_dim = emb_dim, mask_zero = TRUE) %>%
layer_flatten()
# For hID, convert to float32 to match types
input_hID_flat <- input_hID %>%
layer_lambda(function(x) tf$cast(x, tf$float32)) %>%
layer_flatten()
# Merge categorical branch
cat_merged <- layer_concatenate(list(embedding_player_id, embedding_tID, embedding_oID, input_hID_flat)) %>%
layer_dense(units = 16, activation = "relu")
# Numerical branch: input for rolling window data
input_seq <- layer_input(shape = c(ws, length(numF)), name = "input_seq")
lstm_branch <- input_seq %>%
layer_lstm(units = 64, return_sequences = FALSE) %>%
layer_dropout(rate = 0.2)
# Merge both branches and build the output
merged <- layer_concatenate(list(lstm_branch, cat_merged))
dense_layer <- merged %>% layer_dense(units = 32, activation = "relu")
output <- dense_layer %>% layer_dense(units = 1, activation = "linear")
# Build and compile the model
model <- keras_model(
inputs = list(input_seq, input_player_id, input_tID, input_oID, input_hID),
outputs = output,
name = "Goalkeeper_LSTM_Model"
)
model %>% compile(
optimizer = optimizer_adam(),
loss = "mse",
metrics = metrics_regression,
run_eagerly = FALSE
)
summary(model)
plot(model)
# Access the Python keras module directly
keras_python <- import("keras")
# Generate the plot with your desired parameters
keras_python$utils$plot_model(
model,
to_file = "model.png",
show_shapes = TRUE,  # Set to TRUE to see tensor shapes
show_dtype = FALSE,
show_layer_names = TRUE,
rankdir = "TB",      # "TB" (top to bottom) or "LR" (left to right)
expand_nested = FALSE,
dpi = 200,
show_layer_activations = TRUE
)
# Display the image in R
library(png) # or library(png) depending on your output format
img <- readPNG("model.png") # or readJPEG for jpeg format
grid::grid.raster(img)
plot(model)
#img <- readPNG("model.png") # or readJPEG for jpeg format
#grid::grid.raster(img)
png(model, dpi =300)
#img <- readPNG("model.png") # or readJPEG for jpeg format
#grid::grid.raster(img)
png("model.png", width = 800, height = 600)
dev.off()
#img <- readPNG("model.png") # or readJPEG for jpeg format
#grid::grid.raster(img)
png(model,"model.png", width = 800, height = 600)
png("model.png", width = 800, height = 600)
plot(model)
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Set working directory (adjust path as needed)
setwd("C:/Users/peram/OneDrive/Skrivebord")
# Initialize an empty data frame to store combined data
combined_data <- data.frame()
# Loop through the files
for (i in 1:16) {
# Construct file name
file_name <- paste0("Squad Selection t-auto, W77-108,SHL", i, ".csv")
# Read the CSV file
temp_data <- read.csv(file_name)
# Select relevant columns and add a column for sub-horizon (SHL{i})
temp_data <- temp_data %>%
select(gameweek, objective_gw, actual_lineup_points) %>%
mutate(sub_horizon = paste0("SHL", i))
# Combine with the main data frame
combined_data <- rbind(combined_data, temp_data)
}
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Set working directory (adjust path as needed)
setwd("C:/Users/peram/Documents/test/MILP Py")
# Initialize an empty data frame to store combined data
combined_data <- data.frame()
# Loop through the files
for (i in 1:16) {
# Construct file name
file_name <- paste0("Squad Selection t-auto, W77-108,SHL", i, ".csv")
# Read the CSV file
temp_data <- read.csv(file_name)
# Select relevant columns and add a column for sub-horizon (SHL{i})
temp_data <- temp_data %>%
select(gameweek, objective_gw, actual_lineup_points) %>%
mutate(sub_horizon = paste0("SHL", i))
# Combine with the main data frame
combined_data <- rbind(combined_data, temp_data)
}
# Reshape data to long format for ggplot (one column for points, one for type)
plot_data <- combined_data %>%
pivot_longer(cols = c(objective_gw, actual_lineup_points),
names_to = "line_type",
values_to = "points") %>%
mutate(line_type = recode(line_type,
"objective_gw" = "Objective GW",
"actual_lineup_points" = "Actual Lineup"))
# Create the line plot
ggplot(plot_data, aes(x = gameweek, y = points, color = sub_horizon, linetype = line_type)) +
geom_line(size = 0.8) +
labs(x = "Gameweek (GW)",
y = "Points",
color = "Sub-Horizon",
linetype = "Line Type") +
theme_gray() +
theme(legend.position = "right")
# Optionally, save the plot
ggsave("fantasy_points_plot.png", width = 8, height = 5)
rm(list(ls(all = TRUE)))
rm(list = ls(all = TRUE))
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Set working directory (adjust path as needed)
setwd("C:/Users/peram/Documents/test/MILP Py")
rm(list = ls(all = TRUE))
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Set working directory (adjust path as needed)
setwd("C:/Users/peram/Documents/test/MILP Py")
# Initialize an empty data frame to store combined data
combined_data <- data.frame()
# Loop through the files
for (i in 1:16) {
# Construct file name
file_name <- paste0("Squad Selection t-auto, W77-108,SHL", i, ".csv")
# Read the CSV file
temp_data <- read.csv(file_name)
# Select relevant columns and add a column for sub-horizon (SHL{i})
temp_data <- temp_data %>%
select(gameweek, objective_gw, actual_lineup_points) %>%
mutate(sub_horizon = paste0("SHL", i))
# Combine with the main data frame
combined_data <- rbind(combined_data, temp_data)
}
# Reshape data to long format for ggplot (one column for points, one for type)
plot_data <- combined_data %>%
pivot_longer(cols = c(objective_gw, actual_lineup_points),
names_to = "line_type",
values_to = "points") %>%
mutate(line_type = recode(line_type,
"objective_gw" = "Objective GW",
"actual_lineup_points" = "Actual Lineup"))
# Create the line plot
ggplot(plot_data, aes(x = gameweek, y = points, color = sub_horizon, linetype = line_type)) +
geom_line(size = 0.8) +
labs(x = "Gameweek (GW)",
y = "Points",
color = "Sub-Horizon",
linetype = "Line Type") +
theme_gray() +
theme(legend.position = "right")
# Optionally, save the plot
ggsave("fantasy_points_plot.png", width = 8, height = 5)
scale_x_continuous(breaks = seq(77, 108, by = 1)+
# Create the line plot
ggplot(plot_data, aes(x = gameweek, y = points, color = sub_horizon, linetype = line_type)) +
# Create the line plot
ggplot(plot_data, aes(x = gameweek, y = points, color = sub_horizon, linetype = line_type)) +
labs(x = "Gameweek (GW)",
color = "Sub-Horizon",
scale_x_continuous(breaks = seq(77, 108, by = 1)+
theme(legend.position = "right")
# Optionally, save the plot
ggsave("fantasy_points_plot.png", width = 8, height = 5)
scale_x_continuous(breaks = seq(77, 108, by = 1) +
# Create the line plot
ggplot(plot_data, aes(x = gameweek, y = points, color = sub_horizon, linetype = line_type)) +
geom_line(size = 0.8) +
labs(x = "Gameweek (GW)",
y = "Points",
color = "Sub-Horizon",
linetype = "Line Type") +
scale_x_continuous(breaks = seq(77, 108, by = 1)+
seq(0, 31, by = 1),
labels = seq(77, 108, by = 1)) +
theme_gray() +
theme(legend.position = "right")
# Reshape data to long format for ggplot (one column for points, one for type)
plot_data <- combined_data %>%
# Create the line plot
ggplot(plot_data, aes(x = gameweek, y = points, color = sub_horizon, linetype = line_type)) +
geom_line(size = 0.8) +
labs(x = "Gameweek (GW)",
y = "Points",
color = "Sub-Horizon",
linetype = "Line Type") +
scale_x_continuous(breaks = seq(77, 108, by = 1)+
seq(0, 31, by = 1),
labels = seq(77, 108, by = 1)) +
theme_gray() +
theme(legend.position = "right")
# Reshape data to long format for ggplot (one column for points, one for type)
plot_data <- combined_data %>%
pivot_longer(cols = c(objective_gw, actual_lineup_points),
names_to = "line_type",
values_to = "points") %>%
mutate(line_type = recode(line_type,
"objective_gw" = "Objective GW",
"actual_lineup_points" = "Actual Lineup"))
# Create the line plot
ggplot(plot_data, aes(x = gameweek, y = points, color = sub_horizon, linetype = line_type)) +
geom_line(size = 0.8) +
labs(x = "Gameweek (GW)",
y = "Points",
color = "Sub-Horizon",
linetype = "Line Type") +
scale_x_continuous(breaks = seq(77, 108, by = 1)+
seq(0, 31, by = 1),
labels = seq(1, 31, by = 1)) +
theme_gray() +
theme(legend.position = "right")
# Reshape data to long format for ggplot (one column for points, one for type)
plot_data <- combined_data %>%
pivot_longer(cols = c(objective_gw, actual_lineup_points),
names_to = "line_type",
values_to = "points") %>%
mutate(line_type = recode(line_type,
"objective_gw" = "Objective GW",
"actual_lineup_points" = "Actual Lineup"))
# Create the line plot
ggplot(plot_data, aes(x = gameweek, y = points, color = sub_horizon, linetype = line_type)) +
geom_line(size = 0.8) +
labs(x = "Gameweek (GW)",
y = "Points",
color = "Sub-Horizon",
linetype = "Line Type") +
scale_x_continuous(breaks = seq(1, 31, by = 1)+
seq(0, 31, by = 1),
labels = seq(1, 31, by = 1)) +
theme_gray() +
theme(legend.position = "right")
# Create the line plot
ggplot(plot_data, aes(x = gameweek, y = points, color = sub_horizon, linetype = line_type)) +
geom_line(size = 0.8) +
labs(x = "Gameweek (GW)",
y = "Points",
color = "Sub-Horizon",
linetype = "Line Type") +
scale_x_continuous(breaks = seq(1, 31, by = 1)+
seq(1, 31, by = 1),
labels = seq(1, 31, by = 1)) +
theme_gray() +
theme(legend.position = "right")
# Create the line plot
ggplot(plot_data, aes(x = gameweek, y = points, color = sub_horizon, linetype = line_type)) +
geom_line(size = 0.8) +
labs(x = "Gameweek (GW)",
y = "Points",
color = "Sub-Horizon",
linetype = "Line Type") +
scale_x_continuous(breaks = seq(77, 108, by = 1)+
seq(0, 31, by = 1),
labels = seq(77, 108, by = 1)) +
theme_gray() +
theme(legend.position = "right")
# Create the line plot
ggplot(plot_data, aes(x = gameweek, y = points, color = sub_horizon, linetype = line_type)) +
geom_line(size = 0.8) +
labs(x = "Gameweek (GW)",
y = "Points",
color = "Sub-Horizon",
linetype = "Line Type") +
scale_x_continuous(breaks = seq(77, 108, by = 1)) +
theme_gray() +
theme(legend.position = "right")
# Create the line plot
ggplot(plot_data, aes(x = gameweek, y = points, color = sub_horizon, linetype = line_type)) +
geom_line(size = 1) +
labs(x = "Gameweek (GW)",
y = "Points",
color = "Sub-Horizon",
linetype = "Line Type") +
scale_x_continuous(breaks = seq(77, 108, by = 1)) +
theme_gray() +
theme(legend.position = "right")
